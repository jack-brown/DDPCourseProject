#Fit a model using randomForest
modFit <- randomForest(classe ~ ., data = mytrain)
predictTrain <- predict(modFit, mytrain)
confusionMatrix(predictTrain, mytrain$classe)
varImp(modFit)
varImpPlot(modFit)
predictTest <- predict(modFit, mytest)
confusionMatrix(predictTest, mytest$classe)
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
predictTrain <- predict(modFit, mytrain)
confusionMatrix(predictTrain, mytrain$classe)
predictTest <- predict(modFit, mytest)
confusionMatrix(predictTest, mytest$classe)
head(predictTest)
class(predictTest)
frame.predictTest <- as.data.frame(predictTest)
head(frame.predictTest)
View(frame.predictTest)
frame.predictTest <- as.character(predictTest)
head(predictTest)
head(frame.predictTest)
View(frame.predictTest)
answers <- as.character(predict(modFit, test))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd(paste0(homedir, '/PracticalMachineLearning/CourseProject/Answers'))
getwd()
pml_write_files(answers)
setwd(homedir)
getwd()
str(train)
?library
getwd()
testfile
rm(list = ls())
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
confusionMatrix(predictTest, mytest$classe)
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
?avg
?mean
confusionMatrix(predictTest, mytest$classe)
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
confusionMatrix(predictTest, mytest$classe)
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
confusionMatrix(predictTest, mytest$classe)
source('~/Documents/Coursera/PracticalMachineLearning/CourseProject/Project.R')
confusionMatrix(predictTest, mytest$classe)
p1 <- 0.1
err1 <- 1 - 0.9536
p2 <- 0.2
err2 <- 1 - 0.9692
p3 <- 0.4
err3 <- 1 - 0.9866
p4 <- 0.5
err4 <- 1 - 0.9915
pfinal <- 0.6
errfinal <- 1 - 0.9944
error.frame <- data.frame(p1, err1)
error.frame <- rbind(error.frame, c(p2, err2))
error.frame <- rbind(error.frame, c(p3, err3))
error.frame <- rbind(error.frame, c(p4, err4))
error.frame <- rbind(error.frame, c(pfinal, errfinal))
crossval.error <- mean(error.frame[2])
class(error.frame)
mean(error.frame)
error.frame
?colNames
?colnames
error.frame[,2]
mean(error.frame[,2])
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list = ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
head(training)
str(training)
set.seed(62433)
mod1 <- train(diagnosis ~ ., method = 'rf', data = adData)
mod2 <- train(diagnosis ~ ., method = 'gbm', data = adData)
mod3 <- train(diagnosis ~ ., method = 'lda', data = adData)
pred1 <- predict(mod1, training)
pred2 <- predict(mod2, training)
pred3 <- predict(mod3, training)
confusionMatrix(pred1, training$diagnosis)
confusionMatrix(pred2, training$diagnosis)
confusionMatrix(pred3, training$diagnosis)
adCombinedDF <- data.frame(pred1, pred2, pred3, training$diagnosis)
modStacked <- train(diagnosis ~ ., method = 'rf', data = adCombinedDF)
predStacked <- predict(modStacked, testing)
confusionMatrix(predStacked, testing$diagnosis)
View(adCombinedDF)
adCombinedDF <- data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
modStacked <- train(diagnosis ~ ., method = 'rf', data = adCombinedDF)
predStacked <- predict(modStacked, testing)
confusionMatrix(predStacked, testing$diagnosis)
predStacked <- predict(modStacked, adCombinedDF)
confusionMatrix(predStacked, testing$diagnosis)
View(adCombinedDF)
pred1T <- predict(mod1, testing)
pred2T <- predict(mod2, testing)
pred3T <- predict(mod3, testing)
predTDF <- data.frame(pred1 = pred1T, pred2 = pred2T, pred3 = pred3T)
predStacked <- predict(modStacked, predTDF)
confusionMatrix(predStacked, testing$diagnosis)
predTDF <- data.frame(pred1 = pred1T, pred2 = pred2T, pred3 = pred3T, diagnosis = testing$diagnosis)
predStacked <- predict(modStacked, predTDF)
confusionMatrix(predStacked, testing$diagnosis)
set.seed(62433)
mod1 <- train(diagnosis ~ ., method = 'rf', data = training)
mod2 <- train(diagnosis ~ ., method = 'gbm', data = training)
mod3 <- train(diagnosis ~ ., method = 'lda', data = training)
pred1 <- predict(mod1, training)
pred2 <- predict(mod2, training)
pred3 <- predict(mod3, training)
confusionMatrix(pred1, training$diagnosis)
#Accuracy: 1
confusionMatrix(pred2, training$diagnosis)
#Accuracy: 0.9721
confusionMatrix(pred3, training$diagnosis)
#Accuracy: 0.992
adCombinedDF <- data.frame(pred1, pred2, pred3, diagnosis = training$diagnosis)
modStacked <- train(diagnosis ~ ., method = 'rf', data = adCombinedDF)
pred1T <- predict(mod1, testing)
pred2T <- predict(mod2, testing)
pred3T <- predict(mod3, testing)
predTDF <- data.frame(pred1 = pred1T, pred2 = pred2T, pred3 = pred3T, diagnosis = testing$diagnosis)
predStacked <- predict(modStacked, predTDF)
confusionMatrix(predStacked, testing$diagnosis)
confusionMatrix(pred1T, testing$diagnosis)
#Accuracy: 1
confusionMatrix(pred2T, testing$diagnosis)
#Accuracy: 1
confusionMatrix(pred3T, testing$diagnosis)
homedir <- getwd()
URL <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv'
file <- paste0(homedir, '/PracticalMachineLearning/gaData.csv')
download.file(URL, destfile = file, method = 'curl')
library(lubridate)  # For year() function below
dat = read.csv(file = file)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages('lubridate')
homedir <- getwd()
URL <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv'
file <- paste0(homedir, '/PracticalMachineLearning/gaData.csv')
download.file(URL, destfile = file, method = 'curl')
library(lubridate)  # For year() function below
dat = read.csv(file = file)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages('forecast')
names(forecast)
rm(list = ls())
homedir <- getwd()
URL <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv'
file <- paste0(homedir, '/PracticalMachineLearning/gaData.csv')
download.file(URL, destfile = file, method = 'curl')
library(lubridate)  # For year() function below
dat = read.csv(file = file)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
View(training)
View(testing)
?bats
??bats
library(forecast)
?bats
tsmod <- bats(tstrain)
?forecast
fcast <- forecast(tsmod, h = 235, level = 0.95)
fcast
head(fcast$upper)
head(fcast$lower)
tstest = ts(testing$visitsTumblr)
inInt <- (tstest <= fcast$upper) & (tstest >= fcast$lower)
sum(inInt) / length(tstest)
fcast <- forecast(tsmod, h = 235, level = 95)
tstest = ts(testing$visitsTumblr)
inInt <- (tstest <= fcast$upper) & (tstest >= fcast$lower)
sum(inInt) / length(tstest)
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages('e1071')
library(e1071)
?e1071
??e1071
?svm
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, testing)
rmse <- sqrt(sum(pred - testing$CompressiveStrength)/length(testing))
head(pred-testing$CompressiveStrength)
rmse <- sqrt(sum((pred - testing$CompressiveStrength)^2)/length(testing))
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, newdata = testing)
rmse <- sqrt(sum((pred - testing$CompressiveStrength)^2)/length(testing))
rmse <- sqrt(mean((pred - testing$CompressiveStrength)^2))
rmse <- sqrt(sum((pred - testing$CompressiveStrength/length(testing))^2))
rmse <- sqrt(sum((pred - testing$CompressiveStrength)^2)/(length(testing)^2))
rmse <- sqrt(mean((pred - testing$CompressiveStrength)^2))
rmse
rm(list = ls())
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y ~ ., method = 'rf', data = vowel.train)
mod2 <- train(y ~ ., method = 'gbm', data = vowel.train)
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
#Accuracy : 0.6061
confusionMatrix(pred2, vowel.test$y)
#Accuracy : 0.5303
match <- (pred1 == pred2)
agreement.accuracy <- sum(match) * 100 / length(pred1)
agreement.accuracy
install.packages(c("car", "caret", "data.table", "DBI", "dplyr", "formatR", "Formula", "gsubfn", "highr", "Hmisc", "htmltools", "httpuv", "httr", "jsonlite", "knitr", "labeling", "Lahman", "magrittr", "markdown", "mime", "Rcpp", "RCurl", "rmarkdown", "rpart.plot", "RSQLite", "sqldf", "testthat", "xlsx", "xlsxjars", "yaml"))
install.packages(c("car", "caret", "data.table", "DBI", "dplyr",
)
)
install.packages(c("car", "caret", "data.table", "DBI"))
install.packages(c("car", "caret", "data.table", "DBI"))
install.packages(c("car", "caret", "data.table", "DBI"))
install.packages(c("dplyr", "formatR", "Formula", "gsubfn", "highr", "Hmisc", "htmltools", "httpuv", "httr", "jsonlite", "knitr", "labeling", "Lahman", "magrittr", "markdown", "mime", "Rcpp", "RCurl", "rmarkdown", "rpart.plot", "RSQLite", "sqldf", "testthat", "xlsx", "xlsxjars", "yaml"))
rm(list = ls(0))
rm(list = ls())
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages('rCharts')
install.packages('devtools')
libary(rCharts)
library(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
data(airquality)
?dTable
dTable(airquality, sPaginationType = "full_numbers")
data(google)
library(UsingR)
data(google)
View(google)
class(google)
dim(google)
google
dim(google)
str(google)
google$names
rownames(google)
colnames(google)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
data(WWWusage)
head(WWWusage)
head(data(EuStockMarkets))
head(EuStockMarkets)
library(shiny)
rm(list = ls())
getwd()
data <- read.csv('./DevelopingDataProducts/App-DataProduct/data/activity.csv',
header = TRUE, na.strings = 'NA', stringsAsFactors = FALSE)
#transform the date column from character to date type
data$date <- as.Date(data$date, format = '%Y-%m-%d')
#create and append the day of the week factor variable to the data data.frame
data$DayOfWeek <- weekdays(data$date)
data$DayOfWeek <- as.factor(data$DayOfWeek)
#calculate the total number of steps per day
totalStepsPerDay <- aggregate(data$steps,
by = list(Day = data$date, DayOfWeek = data$DayOfWeek), FUN = sum)
colnames(totalStepsPerDay)[3] <- c('steps')
stepsMean = mean(totalStepsPerDay$steps, na.rm = TRUE)
stepsMedian = median(totalStepsPerDay$steps, na.rm = TRUE)
avgStepsPerInterval <- aggregate(data$steps, by = list(Interval = data$interval, DayOfWeek = data$DayOfWeek),
FUN = mean, na.rm = TRUE)
colnames(avgStepsPerInterval)[3] <- c('avgSteps')
24*12
View(avgStepsPerInterval)
avgStepsPerInterval <- aggregate(data$steps, by = list(Interval = data$interval),
FUN = mean, na.rm = TRUE)
colnames(avgStepsPerInterval)[2] <- c('avgSteps')
24*12*7
#determine which time interval has the max number of steps
intervalAvgMaxSteps <- avgStepsPerInterval$Interval[avgStepsPerInterval$avgSteps == max(avgStepsPerInterval$avgSteps)]
#Determine the total number of missing values
countNAs <- colSums(is.na(data))
countNAs <- as.data.frame(countNAs)
#where the steps value is missing, assign the mean of the
#corresponding 5-minute interval to that step value
newsteps <- 0
count <- 0
for (i in 1:length(data$steps)) {
if (is.na(data$steps[i])) {
count <- count + 1
newsteps[i] <- avgStepsPerInterval$avgSteps[avgStepsPerInterval$Interval == data$interval[i]]
}
else {
newsteps[i] <- data$steps[i]
}
}
#create a new dataset with the missing values filled in, but
#otherwise equal to the original dataset
newdata <- cbind(newsteps, data[,2:4])
#calculate the new total number of steps per day
newTotalStepsPerDay <- aggregate(newdata$newsteps,
by = list(Day = newdata$date, DayOfWeek = newdata$DayOfWeek), FUN = sum)
colnames(newTotalStepsPerDay)[3] <- c('newsteps')
#calculate the mean and median of the new total number of steps per day
newStepsMean = mean(newTotalStepsPerDay$newsteps, na.rm = TRUE)
newStepsMedian = median(newTotalStepsPerDay$newsteps, na.rm = TRUE)
#create and append the weekend/weekday factor variable to the newdata data.frame
newdata$Day <- ifelse(weekdays(newdata$date) == 'Sunday' | weekdays(newdata$date) == 'Saturday',
'weekend', 'weekday')
newdata$Day <- as.factor(newdata$Day)
totalStepsPerDay <- aggregate(data$steps,
by = list(Day = data$date), FUN = sum)
totalStepsPerDay <- aggregate(data$steps,
by = list(Day = data$date, DayOfWeek = data$DayOfWeek), FUN = sum)
avgStepsPerDayInterval <- aggregate(newdata$newsteps,
by = list(Day = newdata$Day, Interval = newdata$interval,
DayOfWeek = newdata$DayOfWeek),
FUN = mean, na.rm = TRUE)
colnames(avgStepsPerDayInterval)[3] <- c('avgSteps')
avgStepsPerDayInterval <- aggregate(newdata$newsteps,
by = list(Day = newdata$Day, Interval = newdata$interval),
FUN = mean, na.rm = TRUE)
colnames(avgStepsPerDayInterval)[3] <- c('avgSteps')
runApp(App-DataProduct)
runApp('App-DataProduct')
getwd()
runApp('DevelopingDataProducts/App-DataProduct')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
which.days <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')
totalStepsPerDay$DayOfWeek <- as.character(totalStepsPerDay$DayOfWeek)
totalStepsPerDay$DayOfWeek %in% which.days
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
?cat
?cat
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
library(shiny)
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
g <- ggplot(data = avgStepsPerDayOfWeekInterval, aes(Interval, y = avgSteps)) + geom_line()
print(g)
colnames(avgStepsPerDayInterval)[3] <- c('avgSteps')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
g <- ggplot(data = avgStepsPerDayOfWeekInterval, aes(Interval, y = avgSteps)) + geom_line()
print(g)
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
rm(list = ls())
library(shiny)
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
rm(list = ls())
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
library(shiny)
library(shiny)
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
rm(list = ls())
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
g <- ggplot(data = data, aes(Interval, y = avgSteps)) + geom_line()
g <- ggplot(data = avgStepsPerDayOfWeekInterval, aes(Interval, y = avgSteps)) + geom_line()
days <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday')
g <- g + facet_wrap(~ DayOfWeek[avgStepsPerDayOfWeekInterval$DayOfWeek %in% days], nrow = length(days))
print(g)
g <- g + facet_wrap(~ DayOfWeek, nrow = length(days))
print(g)
g <- g + facet_wrap(~ DayOfWeek, nrow = 7
)
print(g)
avgStepsPerDayOfWeekInterval$DayOfWeek
avgStepsPerDayOfWeekInterval$DayOfWeek %in% days
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
rm(list = ls())
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
rm(list = ls())
rm(list = ls())
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
?ggtitle
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
?mean
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
mean(origdata$steps[origdata$DayOfWeek %in% input$days, ])
which.days <- c('Monday', 'Tuesday')
mean(origdata$steps[origdata$DayOfWeek %in% which.days, ])
mean(origdata$steps[origdata$DayOfWeek %in% which.days])
mean(origdata$steps[origdata$DayOfWeek %in% which.days], na.rm = TRUE)
mean(origdata$steps[origdata$DayOfWeek %in% which.days], na.rm = TRUE)
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
?helpText
?helpText
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
library(shiny)
rm(list = ls())
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
runApp('DevelopingDataProducts/App-DataProduct', display.mode = 'showcase')
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
devtools::install_github('rstudio/shinyapps')
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
shinyapps::setAccountInfo(name='jbrown',
token='85AFE5D168461A7C5584DA0AEEB7D567',
secret='UUJ7UlTpU6xAN8Tqzrf2C40swOkDLJ8pTgeu5tVt')
getwd()
shinyapps::deployApp('DevelopingDataProducts/App-DataProduct')
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
runDeck()
getwd()
setwd('/Users/jackbrown/Documents/Coursera/DevelopingDataProducts/')
ls
ls()
dir
dir()
setwd('/Users/jackbrown/Documents/Coursera/DevelopingDataProducts/App-deck/')
runDeck()
runDeck()
runDeck()
?slidifyUI
library(shiny)
?slidifyUI
?shinyUI
runDeck()
runDeck()
